import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _Object$assign from 'babel-runtime/core-js/object/assign';

var _mutations;

import * as types from '../types';
import { http } from '../../util/ald';
import api from '../../api/urls';
import * as fit from '../../filters/deposit';

var state = {
    toast: {},

    orderDetail: {
        lists: {}
    },
    records: {
        lists: []
    },
    withdraw: {
        data: {}
    },
    currentInterest: 0,
    total: "",
    pageNumber: 0,

    loading: 0,
    loadState: false,
    checkState: "加载更多",
    radioCheck: {},
    chineseNumWithdraw: "",
    protoShow: false,
    toAccountAmt: {
        accountAmt: "0.00",
        drawInterest: "0.00"
    }
};

var getters = {};

var actions = {
    getOrderDetail: function getOrderDetail(_ref, options) {
        var commit = _ref.commit,
            state = _ref.state;

        http.request({
            method: 'POST',
            url: api.orderDetail,
            qs: {
                depositNo: options.depositNo,
                amt: options.amt,
                bankCardSign: options.bankCardSign,
                businessType: options.businessType,
                orderType: options.orderType,
                pageIndex: options.pageIndex,
                pageSize: 10
            }
        }, function (res) {
            var result = res;
            if (result && result.responseCode == '000000') {
                for (var i = 0; i < result.data.rateInfoList.length; i++) {
                    if (result.data.rateInfoList[i].type === "0") {
                        result.data.timeDueRate = result.data.rateInfoList[i].rateInfo.drawRate * 100;
                        result.data.timeDueInterest = fit.formatMoneyNumber(result.data.rateInfoList[i].rateInfo.interest, "blur");
                    } else if (result.data.rateInfoList[i].type === "1") {
                        result.data.TDueRate = result.data.rateInfoList[i].rateInfo.drawRate * 100;
                        result.data.TDueInterest = fit.formatMoneyNumber(result.data.rateInfoList[i].rateInfo.interest, "blur");
                    } else if (result.data.rateInfoList[i].type === "2") {
                        result.data.dueRate = result.data.rateInfoList[i].rateInfo.drawRate * 100;
                        result.data.dueInterest = fit.formatMoneyNumber(result.data.rateInfoList[i].rateInfo.interest, "blur");
                    }
                }

                for (var i = 0; i < result.data.drawDetail.orders.length; i++) {
                    var item = result.data.drawDetail.orders[i];
                    item.addMinus = item.businessType === "01" ? "+" : "-";
                    item.orderStatusCH = fit.orderStatusFun(item.tranStatus, item.businessType);
                    item.orderTypeCH = fit.orderTypeFun(item.businessType);
                    item.transAmt = fit.formatMoneyNumber(item.transAmt, "blur");
                }

                result.data.saveDeadLine = fit.year(result.data.saveDeadLine);
                result.data.currency = fit.monetaryUnit(result.data.currency);
                result.data.transAmtFort = fit.formatMoneyNumber(result.data.transAmt, "blur");
                result.data.transAmtCH = fit.chineseNum(result.data.transAmt);

                commit(types["RECORDS"], { recordList: result.data.drawDetail.orders, pageNum: options.pageNum, total: result.data.drawDetail.totalNum });
                result.data.lastFourNum = result.data.payeeAcctNo.substr(-4);

                commit(types["ORDER_DETAIL"], { payload: result.data });
            } else {
                alert({
                    title: res.responseMsg
                });
            }
        });
    },
    getRecords: function getRecords(_ref2, options) {
        var commit = _ref2.commit,
            state = _ref2.state;

        http.request({
            method: 'POST',
            url: api.records,
            qs: {}
        }, function (res) {
            var result = res;

            if (result && result.responseCode == '000000') {

                if (result.data && typeof result.data == 'string') {
                    result.data = JSON.parse(result.data);
                }
                for (var i = 0; i < result.data.pageData.length; i++) {
                    result.data.pageData[i].addMinus = result.data.pageData[i].orderType === "1.1" ? "+" : "-";
                    result.data.pageData[i].orderStatus = fit.orderStatusFun(result.data.pageData[i].orderStatus);
                    result.data.pageData[i].orderType = fit.orderTypeFun(result.data.pageData[i].orderType);
                    if (result.data.pageData[i].dealStatus === "1") {
                        result.data.pageData[i].rightShow = "处理中";
                    } else if (result.data.pageData[i].dealStatus === "2") {
                        result.data.pageData[i].rightShow = result.data.pageData[i].orderStatus;
                    } else if (result.data.pageData[i].dealStatus === "3") {
                        result.data.pageData[i].rightShow = "处理失败";
                    }
                }

                commit(types["RECORDS"], { recordList: result.data, pageNum: options.pageNum, total: result.data.total });
                options.cb && options.cb();
            } else {
                commit(types.TOAST);
            }
        });
    },
    getWithdraw: function getWithdraw(_ref3, options) {
        var commit = _ref3.commit,
            state = _ref3.state;

        http.request({
            method: 'POST',
            url: api.withdrawDeposit,
            qs: {
                amt: options.inputVal,
                cardNo: options.cardNo,
                currentDay: options.currentDay,
                depSerialNo: options.depSerialNo,
                endDate: options.endDate,
                isDepositFlag: "0",
                queryType: options.queryType,
                startDate: options.startDate,
                terminalType: "2",
                tranId: options.tranId,
                bussType: "9110",
                ecifNo: options.ecifNo,
                ccy: "RMB"
            }
        }, function (res) {
            var result = res;
            var radioData = {};
            if (result && result.responseCode == '000000') {
                if (options.flag === "calc") {
                    commit(types["WITHDRAWINTEREST"], { inputVal: options.inputVal, interest: result.data.interest });
                }

                var protoShow = {};

                if (options.queryType === "0") {
                    result.data.currentRate = result.data.drawRate * 100;
                    commit(types["CURRENTINTEREST"], { payload: result.data.currentRate });
                } else if (options.queryType === "1") {
                    if (result.data.isDrawFlag === "1") {
                        radioData.iconCh = false;
                        radioData.iconChed = true;
                        radioData.tFlag = "t1";
                        protoShow.protoSh = true;
                        protoShow.placeCon = result.data.placeholderAmt = fit.formatMoneyNumber(result.data.leastAmt, "blur") + "元起";
                    } else {
                        radioData.iconCh = true;
                        radioData.iconChed = false;
                        radioData.tFlag = "t0";
                        protoShow.protoSh = false;
                        protoShow.placeCon = result.data.placeholderAmt = "0.01元起";
                    }
                    result.data.tRate = result.data.drawRate * 100;
                    commit(types["DHT_PROTOSHOW"], protoShow);
                    commit(types["DHT_WITHDRAWNUM"], result.data.placeholderAmt);
                    commit(types["RADIOCHECK"], { payload: radioData });
                    commit(types["WITHDRAW"], { payload: result.data });
                }
            } else {
                alert({
                    title: res.responseMsg
                });
            }
        });
    },
    getInterest: function getInterest(_ref4, options) {
        var commit = _ref4.commit,
            state = _ref4.state;

        http.request({
            method: 'GET',
            url: api.withdrawInterest,
            qs: {}
        }, function (result) {
            if (result && result.responseCode == '000000') {} else {
                commit(types.TOAST);
            }
        });
    },
    creatOrder: function creatOrder(_ref5, options) {
        var commit = _ref5.commit,
            state = _ref5.state;

        http.request({
            method: 'GET',
            url: api.createOrder,
            qs: {
                prdType: "09",
                sourceAppId: "222222",
                transAmt: options.transAmt,
                transType: options.transType
            }
        }, function (result) {
            if (result && result.responseCode == '000000') {
                options.cb && options.cb(result.data);
            } else {
                alert({
                    title: res.responseMsg
                });
            }
        });
    },
    getPaySearialNo: function getPaySearialNo(_ref6, options) {
        var commit = _ref6.commit,
            state = _ref6.state;

        http.request({
            method: 'GET',
            url: api.getPaySearialNo,
            qs: {
                fundType: "09",
                orderAmount: options.orderAmount,
                orderNo: options.orderNo
            }
        }, function (result) {
            if (result && result.responseCode == '000000') {
                options.cb && options.cb(result.data);
            } else {
                alert({
                    title: res.responseMsg
                });
            }
        });
    }
};

var mutations = (_mutations = {}, _defineProperty(_mutations, types.TOAST, function (state, _ref7) {
    var payload = _ref7.payload;

    state.toast = payload;
}), _defineProperty(_mutations, types.RADIOCHECK, function (state, _ref8) {
    var payload = _ref8.payload;

    state.radioCheck = payload;
}), _defineProperty(_mutations, types.ORDER_DETAIL, function (state, _ref9) {
    var payload = _ref9.payload;

    state.orderDetail.lists = payload;
}), _defineProperty(_mutations, types.RECORDS, function (state, payload) {
    if (payload.pageNum == 1) {
        state.records.lists = payload.recordList;
    } else {
        state.records.lists = state.records.lists.concat(payload.recordList);
    }
    state.total = payload.total;
    state.loading = 0;
    if (payload.total == 0) {
        state.loadState = true;
    } else {
        state.loadState = false;
    }
    if (payload.pageNum * 10 > payload.total || payload.total <= 10) {
        state.loading = 2;
        state.checkState = "已无更多数据";
    } else {
        state.checkState = "加载更多";
    }
}), _defineProperty(_mutations, 'DHT_RADIO', function DHT_RADIO(state) {
    state.radioCheck.iconCh = !state.radioCheck.iconCh;
    state.radioCheck.iconChed = !state.radioCheck.iconChed;
    if (state.radioCheck.tFlag === "t0") {
        state.radioCheck.tFlag = "t1";
    } else {
        state.radioCheck.tFlag = "t0";
    }
}), _defineProperty(_mutations, types.DHT_WITHDRAWNUM, function (state, payload) {
    state.chineseNumWithdraw = payload;
}), _defineProperty(_mutations, types.DHT_PROTOSHOW, function (state, payload) {
    state.protoShow = payload;
}), _defineProperty(_mutations, 'DHT_PROTOSHOWAGAIN', function DHT_PROTOSHOWAGAIN(state, payload) {
    state.protoShow.protoSh = payload;
    if (payload) {
        state.protoShow.placeCon = fit.formatMoneyNumber(state.withdraw.data.leastAmt, "blur") + "元起";
    } else {
        state.protoShow.placeCon = "0.01元起";
    }
}), _defineProperty(_mutations, 'DHT_CHINESENUM', function DHT_CHINESENUM(state, payload) {
    state.chineseNumWithdraw = payload;
}), _defineProperty(_mutations, types.WITHDRAW, function (state, _ref10) {
    var payload = _ref10.payload;

    state.withdraw.data = _Object$assign(state.withdraw.data, payload);
}), _defineProperty(_mutations, types.CURRENTINTEREST, function (state, _ref11) {
    var payload = _ref11.payload;

    state.currentInterest = payload;
}), _defineProperty(_mutations, types.WITHDRAWINTEREST, function (state, payload) {
    state.toAccountAmt.accountAmt = fit.formatMoneyNumber(Number(payload.inputVal) + Number(payload.interest), "blur");
    state.toAccountAmt.drawInterest = fit.formatMoneyNumber(payload.interest, "blur");
}), _mutations);

export default {
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations
};