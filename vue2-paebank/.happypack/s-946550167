import _defineProperty from 'babel-runtime/helpers/defineProperty';

var _mutations;

import * as types from '../types';
import * as ald from '../../util/ald';
import api from '../../api/urls';

var state = {
    info: {},
    userInfo: {}
};

var actions = {
    queryCashInfo: function queryCashInfo(_ref) {
        var commit = _ref.commit,
            state = _ref.state;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        ald.http.request({
            method: 'GET',
            url: api.queryCashInfo,
            qs: {}
        }, function (res) {
            if (res && res.responseCode == '000000') {
                commit(types.CASH_DETAIL_INFO, { info: res.data || {} });
            } else {
                console.log(res);
            }
        });
    },
    getUserInfo: function getUserInfo(_ref2) {
        var commit = _ref2.commit,
            state = _ref2.state;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        ald.http.request({
            method: 'GET',
            url: api.getUserInfo,
            qs: {}
        }, function (res) {
            if (res && res.responseCode == '000000') {
                commit(types.CASH_USER_INFO, { userInfo: res.data || {} });
                options.cb && options.cb(res);
            } else {
                console.log(res);
            }
        });
    }
};

var mutations = (_mutations = {}, _defineProperty(_mutations, types.CASH_DETAIL_INFO, function (state, payload) {
    state.info = payload.info;
}), _defineProperty(_mutations, types.CASH_USER_INFO, function (state, payload) {
    state.userInfo = payload.userInfo;
}), _mutations);

export default {
    state: state,
    actions: actions,
    mutations: mutations
};