import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _objectDestructuringEmpty from 'babel-runtime/helpers/objectDestructuringEmpty';
import _Promise from 'babel-runtime/core-js/promise';

var _mutations;

import * as types from '../types';
import { http } from '../../util/ald';
import api from '../../api/urls';

var funcNavs = [{
    native: false,
    title: '排行',
    classes: 'icon fund-icon-sort',
    eventId: '0207001-理财-功能区-基金-排行',
    url: api.fund_rank_icon
}, {
    native: false,
    title: '热销基金',
    classes: 'icon fund-icon-hot-fund',
    eventId: '0207002-理财-功能区-基金-热销基金',
    url: api.fund_hot_icon
}, {
    title: '我的关注',
    native: true,
    classes: 'icon fund-icon-my-focus',
    eventId: '0207003-理财-功能区-基金-我的关注',
    url: api.fund_my_collect
}, {
    native: false,
    title: '定投',
    classes: 'icon fund-icon-fixed',
    eventId: '0207004-理财-功能区-基金-定投',
    url: api.fund_fixed_icon
}, {
    native: true,
    title: '我的基金',
    classes: 'icon fund-icon-my-fund',
    eventId: '0207005-理财-功能区-基金-我的基金',
    url: api.fund_my

}];
var state = {
    toast: {},
    funcNavs: funcNavs,

    youxuan: {
        hasMore: true,
        moreUrl: api.fund_hot_icon,
        eventId: '0207007-理财-功能区-基金-热销基金-更多',
        lists: []
    },

    shoufa: {
        hasMore: false,
        moreUrl: api.fund_first_icon,
        lists: []
    },

    zhuti: {
        native: true,
        hasMore: false,
        moreUrl: api.fund_theme,
        lists: []
    },

    orderDetail: {
        lists: []
    },
    records: {
        lists: []
    },
    withdraw: {
        data: {}
    },

    myliveDead: {
        lists: []
    },

    nomyliveDead: false,

    mycard: {
        lists: []
    },

    showlist: {},
    changecard: "",
    total: "",
    pageNumber: 0,

    loading: 0,
    loadState: false,
    checkState: "加载更多",
    nocard: false
};

var getters = {};

var actions = {
    getMyliveDead: function getMyliveDead(_ref, options) {
        var commit = _ref.commit,
            state = _ref.state;

        return new _Promise(function (resolve, reject) {
            http.request({
                method: 'GET',
                url: "https://rmb-stg2.pingan.com.cn:6443/bron/ibank/cust/bron-ibank-pd/superDht/checkLogin/queryDHBHold.do",
                qs: {
                    cardNo: options.cardNo,
                    currentPgs: options.currentPgs,
                    pageSize: options.pageSize
                }
            }, function (res) {
                if (res && res.responseCode == '000000') {
                    if (res.data && typeof res.data == 'string') {
                        res.data = JSON.parse(res.data);
                    }
                    debugger;
                    if (res.data.holdNum != 0) {
                        commit(types["MYLIVE_DEAD"], { show_list: res.data, currentPgs: options.currentPgs, holdNum: res.data.holdNum });
                        commit(types["MYTOTAL"], { payload: res.data });
                        resolve({ showlive: false, cardshow: false, data: res.data, No: options.cardNo });
                    } else {
                        resolve({ showlive: true, cardshow: true });
                    }
                } else {
                    commit(types.TOAST);
                }
            });
        });
    },
    getMyliveCards: function getMyliveCards(_ref2, options) {
        var commit = _ref2.commit,
            state = _ref2.state;

        return new _Promise(function (resolve, reject) {
            http.request({
                method: 'GET',
                url: "https://rmb-stg2.pingan.com.cn:6443/bron/ibank/cust/bron-ibank-pd/dhtCommon/checkLogin/dhtQueryCardList.do",
                qs: {}
            }, function (res) {
                debugger;
                if (res && res.responseCode == '000000') {
                    if (res.data && typeof res.data == 'string') {
                        res.data = JSON.parse(res.data);
                    }
                    if (res.data.length == 0) {
                        resolve({ data: res.data, car_id: true });
                    } else {
                        commit(types["MYCARDS"], { payload: res.data });
                        resolve({ data: res.data, fa_id: true });
                    }
                } else {
                    commit(types.TOAST);
                }
            });
        });
    }
};

var mutations = (_mutations = {}, _defineProperty(_mutations, types.NOCARD, function (state, _ref3) {
    _objectDestructuringEmpty(_ref3);

    state.nocard = true;
}), _defineProperty(_mutations, types.NOMYLIVE_DEAD, function (state, _ref4) {
    var payload = _ref4.payload;

    state.nomyliveDead = true;
}), _defineProperty(_mutations, types.TOAST, function (state, _ref5) {
    var payload = _ref5.payload;

    state.toast = payload;
}), _defineProperty(_mutations, types.C0012_INV_FUND_HOTSALE_FUND, function (state, _ref6) {
    var payload = _ref6.payload;

    state.youxuan.lists = payload.recommendPrdList;
}), _defineProperty(_mutations, types.ORDER_DETAIL, function (state, _ref7) {
    var payload = _ref7.payload;

    state.orderDetail.lists = payload;
}), _defineProperty(_mutations, types.MYCARDS, function (state, _ref8) {
    var payload = _ref8.payload;

    state.mycard.lists = payload;
}), _defineProperty(_mutations, types.CARDFIRST, function (state, _ref9) {
    var payload = _ref9.payload;

    state.changecard = payload;
}), _defineProperty(_mutations, types.MYTOTAL, function (state, payload) {

    state.showlist = payload.payload;
}), _defineProperty(_mutations, types.MYLIVE_DEAD, function (state, payload) {
    if (payload.currentPgs == 1) {
        state.myliveDead.lists = payload.show_list.tranListArray[0].acctArray;
    } else {
        state.myliveDead.lists = state.myliveDead.lists.concat(payload.show_list.datalist);
    }
}), _defineProperty(_mutations, 'DHT_LOADING_STATE', function DHT_LOADING_STATE(state) {
    state.loading = 1;
}), _defineProperty(_mutations, 'DHT_CHANGECARDSHOW', function DHT_CHANGECARDSHOW(state, payload) {
    state.changecard = payload;
}), _defineProperty(_mutations, types.WITHDRAW, function (state, _ref10) {
    var payload = _ref10.payload;

    state.withdraw.data = payload;
}), _defineProperty(_mutations, types.C0012_INV_FUND_IPO_FUND, function (state, _ref11) {
    var payload = _ref11.payload;

    state.shoufa.lists = payload.recommendPrdList;
}), _defineProperty(_mutations, types.C0012_INV_FUND_THEME_FUND, function (state, _ref12) {
    var payload = _ref12.payload;

    state.zhuti.lists = payload.recommendPrdList;
}), _mutations);

export default {
    state: state,
    getters: getters,
    actions: actions,
    mutations: mutations
};