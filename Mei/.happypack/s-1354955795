import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _objectDestructuringEmpty from 'babel-runtime/helpers/objectDestructuringEmpty';
import _Promise from 'babel-runtime/core-js/promise';

var _mutations;

import * as types from '../types';
import { http } from '../../util/ald';

import { MessageBox } from 'mint-ui';

var state = {
  toast: {},

  orderDetail: {
    lists: []
  },
  records: {
    lists: []
  },
  withdraw: {
    data: {}
  },

  myliveDead: {
    lists: []
  },

  nomyliveDead: false,

  mycard: {
    lists: []
  },

  showlist: {},
  changecard: "",
  total: "",
  pageNumber: 0,

  loading: 0,
  loadState: false,
  checkState: "加载更多",
  nocard: false
};

var getters = {};

var actions = {
  getMyliveDead: function getMyliveDead(_ref, options) {
    var commit = _ref.commit,
        state = _ref.state;

    return new _Promise(function (resolve, reject) {
      var optionsReq = {
        url: "queryDHBHold",
        env: "stg3",
        qs: {
          bankCardSign: options.bankCardSign,
          currentPgs: options.currentPgs,
          pageSize: options.pageSize
        }
      };
      http.fetch(optionsReq).then(function (res) {
        if (res.responseCode === '000000') {
          if (res.data.holdNum != 0) {
            commit(types["MYLIVE_DEAD"], { show_list: res.data, currentPgs: options.currentPgs, holdNum: res.data.holdNum });
            commit(types["MYTOTAL"], { payload: res.data });
            resolve({ showlive: false, cardshow: false, data: res.data, No: options.cardNo });
          } else {
            resolve({ showlive: true, cardshow: true });
          }
          options.cb && options.cb();
        } else {
          MessageBox.alert({
            title: '温馨提示',
            message: res.responseMsg
          });
        }
      });
    });
  },
  getMyliveCards: function getMyliveCards(_ref2, options) {
    var commit = _ref2.commit,
        state = _ref2.state;

    return new _Promise(function (resolve, reject) {
      var optionsReq = {
        url: "dhtQueryCardList",
        env: "stg3",
        qs: {}
      };
      http.fetch(optionsReq).then(function (res) {
        if (res.responseCode === '000000') {
          if (res.data.length == 0) {
            resolve({ data: res.data, car_id: true });
          } else {
            for (var i = 0; i < res.data.length; i++) {
              if (res.data[i].cardType == "1") {
                res.data[i].bankName = res.data[i].bankName + "储蓄卡";
              } else if (res.data[i].cardType == "3") {
                res.data[i].bankName = res.data[i].bankName + "互联网账户";
              }
            }
            commit(types["MYCARDS"], { payload: res.data });
            resolve({ data: res.data, fa_id: true });
          }
          options.cb && options.cb();
        } else {
          MessageBox.alert({
            title: '温馨提示',
            message: res.responseMsg
          });
        }
      });
    });
  }
};

var mutations = (_mutations = {}, _defineProperty(_mutations, types.NOCARD, function (state, _ref3) {
  _objectDestructuringEmpty(_ref3);

  state.nocard = true;
}), _defineProperty(_mutations, types.NOMYLIVE_DEAD, function (state, _ref4) {
  var payload = _ref4.payload;

  state.nomyliveDead = true;
}), _defineProperty(_mutations, types.TOAST, function (state, _ref5) {
  var payload = _ref5.payload;

  state.toast = payload;
}), _defineProperty(_mutations, types.C0012_INV_FUND_HOTSALE_FUND, function (state, _ref6) {
  var payload = _ref6.payload;

  state.youxuan.lists = payload.recommendPrdList;
}), _defineProperty(_mutations, types.ORDER_DETAIL, function (state, _ref7) {
  var payload = _ref7.payload;

  state.orderDetail.lists = payload;
}), _defineProperty(_mutations, types.MYCARDS, function (state, _ref8) {
  var payload = _ref8.payload;

  state.mycard.lists = payload;
}), _defineProperty(_mutations, types.CARDFIRST, function (state, _ref9) {
  var payload = _ref9.payload;

  state.changecard = payload;
}), _defineProperty(_mutations, types.MYTOTAL, function (state, payload) {

  state.showlist = payload.payload;
}), _defineProperty(_mutations, types.MYLIVE_DEAD, function (state, payload) {
  if (payload.currentPgs == 1) {
    state.myliveDead.lists = payload.show_list.tranListArray[0].acctArray;
  } else {
    state.myliveDead.lists = state.myliveDead.lists.concat(payload.show_list.tranListArray[0].acctArray);
  }
}), _defineProperty(_mutations, 'DHT_LOADING_STATE', function DHT_LOADING_STATE(state) {
  state.loading = 1;
}), _defineProperty(_mutations, 'DHT_CHANGECARDSHOW', function DHT_CHANGECARDSHOW(state, payload) {
  state.changecard = payload;
}), _defineProperty(_mutations, 'DHTWW_CHANGECARDSHOW', function DHTWW_CHANGECARDSHOW(state, payload) {
  state.changecard = payload;
}), _defineProperty(_mutations, types.WITHDRAW, function (state, _ref10) {
  var payload = _ref10.payload;

  state.withdraw.data = payload;
}), _mutations);

export default {
  state: state,
  getters: getters,
  actions: actions,
  mutations: mutations
};