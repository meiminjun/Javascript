import _extends from 'babel-runtime/helpers/extends';
import _typeof from 'babel-runtime/helpers/typeof';
import _Promise from 'babel-runtime/core-js/promise';
import _Object$assign from 'babel-runtime/core-js/object/assign';
import * as aladdin from 'aladdin';
import bow from 'bow';
import * as types from '../store/types';
import { tryLogin } from './acc';
import config from '../../config';


var emptyFunction = function emptyFunction() {};

export function isAladdinHybrid() {
  var ua = navigator.userAgent + '';
  return ua.indexOf('AladdinHybrid') !== -1;
}

var requestCount = 0;
var needLoginCode = ['291007', '291005', '291001'];

export var http = {
  request: function request(options, cb) {
    if (requestCount++ === 0) {
      window.__store.commit(types.COMMON_LOADING, true);
    }
    bow.http.request(options, function (err, res) {
      if (requestCount === 0 || --requestCount === 0) {
        window.__store.commit(types.COMMON_LOADING, false);
      }

      if (err) {
        return console.info('服务器异常', err);
      }

      var json = void 0;
      try {
        json = JSON.parse(res.body);
      } catch (e) {
        json = null;
      }
      var responseCode = json && json.responseCode ? json.responseCode : '';

      if (needLoginCode.indexOf(responseCode) != -1) {
        tryLogin();
      } else {
        cb(json || {});
      }
    });
  },

  fetch: function fetch(options) {
    var beforeSend = options.beforeSend || emptyFunction;
    var complete = options.complete || emptyFunction;
    var interfaceEnv = ENV;
    var hostname = '';
    var otherHostName = '';
    if (options && typeof options.url === 'undefined') {
      console.error('请检查你的请求url是否存在');
      return;
    }
    if (!config.url[options.url]) {
      console.error('请检查你的config/url中里是否设置接口url');
      return;
    }

    if (interfaceEnv !== 'web') {
      if (!config.hostname[interfaceEnv]) {
        console.error('请检查config/index中是否有该环境');
        return;
      }
      hostname = config.hostname[interfaceEnv].default;
      if (process.env.NODE_ENV !== 'development') {
        if (interfaceEnv !== 'prd' && options.env) {
          otherHostName = config.hostname[interfaceEnv][options.env];
          if (otherHostName) {
            options.url = otherHostName + config.url[options.url];
          } else {
            options.url = hostname + config.url[options.url];
          }
        } else {
          options.url = hostname + config.url[options.url];
        }
      } else {
        if (!config.isproxy) {
          otherHostName = config.hostname[interfaceEnv][options.env];
          if (otherHostName) {
            options.url = otherHostName + config.url[options.url];
          } else {
            options.url = hostname + config.url[options.url];
          }
        } else {
          options.url = config.url[options.url];
        }
      }
    } else if (interfaceEnv === 'web') {
      options.url = 'api/' + options.url;
    }

    function _beforeSend() {
      if (requestCount++ === 0) {
        window.__store.commit(types.COMMON_LOADING, true);
        if (bow.loading) {
          console.dir(bow.loading);
          bow.loading.start({ canCancel: false });
        } else {
          console.warn('bow.loading plugin is needed!');
        }
      }
      beforeSend();
    }

    function _complete() {
      if (requestCount === 0 || --requestCount === 0) {
        window.__store.commit(types.COMMON_LOADING, false);
        if (bow.loading) {
          bow.loading.stop();
        } else {
          console.warn('bow.loading plugin is needed! ');
        }
      }
      complete();
    }
    var defaultOptions = {
      url: '',
      method: 'POST',
      qs: null,
      timeout: 60000,
      xhrFields: { withCredentials: true }
    };
    options = _Object$assign({}, defaultOptions, options);

    return new _Promise(function (resolve, reject) {
      _beforeSend();
      bow.http.request(options, function (err, res) {
        _complete();

        if (err) {
          if (String(err.code) === '404') {
            console.error('没有该接口:' + options.url);
          } else {
            console.error('服务器异常', err);
          }
          return;
        }
        var json = void 0;
        try {
          json = JSON.parse(res.body);
        } catch (e) {
          console.error('json解析错误', e);
          json = null;
        }

        var responseCode = json && json.responseCode ? json.responseCode : '';
        if (needLoginCode.indexOf(responseCode) != -1) {
          tryLogin();
        } else {
          resolve(json || {});
        }
      });
    });
  },

  jsonp: function jsonp(options, cb) {
    var name = void 0,
        url = options.url,
        params = options.params || {},
        _parseData = function _parseData(data) {
      var ret = '';
      if (typeof data === 'string') {
        ret = data;
      } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        for (var key in data) {
          ret += '&' + key + '=' + encodeURIComponent(data[key]);
        }
      }

      ret = ret.substr(1);
      return ret;
    },
        _removeElement = function _removeElement(elem) {
      var parent = elem.parentNode;

      if (parent && parent.nodeType !== 11) {
        parent.removeChild(elem);
      }
    };

    url = url + (url.indexOf('?') === -1 ? '?' : '&') + _parseData(params);

    var match = /callback=(\w+)/.exec(url);

    if (match && match[1]) {
      name = match[1];
    } else {
      name = options.jsonpCallback || 'jsonp_' + new Date().getTime() + '_' + Math.random().toString().substr(2);
      url = url.replace('callback=?', 'callback=' + name);
      url = url.replace('callback=%3F', 'callback=' + name);
    }

    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.id = 'id_' + name;

    window[name] = function (json) {
      window[name] = undefined;
      var elem = document.getElementById('id_' + name);
      _removeElement(elem);

      cb(json);
    };

    var head = document.getElementsByTagName('head');
    if (head && head[0]) {
      head[0].appendChild(script);
    }
  }
};

export var navigator = {
  forward: function forward(options) {
    bow.navigator.forward(options);
  },
  back: function back() {
    bow.navigator.back();
  }
};

function doForward(opts) {
  var url = opts.url;
  var ua = navigator.userAgent + '';
  if (/android/ig.test(ua) && history.replaceState && (!/(http:|https:)/g.test(url) || url.indexOf(location.origin) != -1)) {
    history.replaceState(null, document.title, url);
    history.go(0);
    if (navigator.userAgent.match(/QQBrowser/ig)) {
      location.reload();
    }
  } else {
    window.location.replace(url);
  }
}

function _toQueryPair(key, value) {
  if (typeof value === 'undefined') {
    return key;
  }
  return key + '=' + encodeURIComponent(value === null ? '' : String(value));
}

function _toQueryString(obj) {
  var ret = [];
  for (var key in obj) {
    key = encodeURIComponent(key);
    var values = obj[key];
    if (values && values.constructor === Array) {
      var queryValues = [];
      for (var i = 0, len = values.length, value; i < len; i++) {
        value = values[i];
        queryValues.push(_toQueryPair(key, value));
      }
      ret = ret.concat(queryValues);
    } else {
      ret.push(_toQueryPair(key, values));
    }
  }
  return ret.join('&');
}

function _doForward(opts) {
  var url = opts.url;
  var ua = navigator.userAgent + '';
  if (/android/ig.test(ua) && history.replaceState && (!/(http:|https:)/g.test(url) || url.indexOf(location.origin) != -1)) {
    history.replaceState(null, document.title, url);
    history.go(0);
    if (navigator.userAgent.match(/QQBrowser/ig)) {
      location.reload();
    }
  } else {
    window.location.replace(url);
  }
}

export var nav = {
  forward: function forward(options) {
    if (!options.url) {
      console.error('请检查你的跳转url是否存在');
      return;
    }
    var router = config.router;
    var routerhost = config.routerhost;
    var env = ENV;
    var url = '';
    var searchStr;
    if (!router[options.url]) {
      console.error('conifg/url的配置中不存在' + options.url + '路由地址');
      return;
    }
    url = router[options.url];

    if (process.env.NODE_ENV !== 'development') {
      if (options.env) {
        options.url = routerhost[env][options.env] + url;
      } else {
        options.url = url;
      }
    } else {
      if (options.env) {
        options.url = routerhost['development'][options.env] + url;
      } else {
        options.url = url;
      }
    }
    options = _Object$assign({}, options);
    if (typeof options.type === 'string') {
      if (options.qs) {
        searchStr = _toQueryString(options.qs);
        options.url = options.url + '?' + searchStr;
      }
      if (options.replace) {
        window.location.replace(options.url);
      } else {
        window.location.href = options.url;
      }
    } else {
      bow.navigator.forward(options);
    }
  },

  back: function back(options) {
    if (typeof options !== 'number' && options instanceof Object) {
      bow.navigator.back(options);
    } else {
      var index = typeof options === 'undefined' ? -1 : options;
      window.location.go(index);
    }
  }
};

export var store = {
  localStorage: {
    setItem: function setItem(options, cb) {
      aladdin.localStorage.setItem(options.key, options.value, true, '3DES', cb);
    },
    getItem: function getItem(key, cb) {
      aladdin.localStorage.getItem(key, true, '3DES', cb);
    },
    removeItem: aladdin.localStorage.removeItem,
    clear: aladdin.localStorage.clear
  },
  sessionStorage: {
    setItem: aladdin.sessionStorage.setItem,
    getItem: aladdin.sessionStorage.getItem,
    removeItem: aladdin.sessionStorage.removeItem,
    clear: aladdin.sessionStorage.clear
  }
};

export var track = {
  record: function record(options) {
    console.info(options);
    bow.talkingData.trackEvent({ eventId: options });
  }
};

export var event = {
  on: function on(event, cb) {
    bow.on && bow.on(event, cb);
  },
  off: function off(event, cb) {
    bow.on && bow.off(event, cb);
  },
  once: function once(event, cb) {
    bow.on && bow.once(event, cb);
  }
};

export var env = _extends({}, aladdin.env || {});

export var toast = {
  show: function show(options, callback) {
    var defalut = {
      message: '默认显示',
      position: 'bottom' };
    aladdin.toast.show(_Object$assign({}, defalut, options), function (err) {
      if (err) {
        console.error(err.message || '调用失败');
      } else {
        callback && callback();
      }
    });
  }
};

export var dialog = {
  alert: function alert(options, callback) {
    var defalut = {
      title: '提示',
      message: '请写提示语',
      buttonText: '确认',
      buttonCallback: emptyFunction
    };
    aladdin.dialog.alert(_Object$assign({}, defalut, options), function (err) {
      if (err) {
        console.error(err.message || '调用失败');
      } else {
        callback && callback();
      }
    });
  },
  confirm: function confirm(options, callback) {
    var defalut = {
      title: '提示',
      message: '是否进行选择',
      leftButtonText: '取消',
      leftButtonCallback: emptyFunction,
      rightButtonText: '确定',
      rightButtonCallback: emptyFunction
    };
    aladdin.dialog.confirm(_Object$assign({}, defalut, options), function (err) {
      if (err) {
        console.error(err.message || '调用失败');
      } else {
        callback && callback();
      }
    });
  }
};