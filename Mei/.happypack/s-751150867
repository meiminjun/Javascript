import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';

var _mutations;

import financeService from '../../api/deposit_detail';
import * as types from '../types';
import * as fit from '../../filters/deposit';

var state = {
  aipFund: {
    lists: []
  },
  history: {
    lists: [],
    real: []
  }
};

var actions = {
  getAipRecommend: function getAipRecommend(_ref) {
    var commit = _ref.commit;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    financeService.getAipRecommend(_extends({
      url: 'queryFixedCurrentLinkList',

      productClass: '1'
    }, params), function (data) {
      commit(types.DEPOSIT_DETAIL, { lists: data.productList[0], pageNum: "1" });
    });
  },
  getCreateOrder: function getCreateOrder(_ref2) {
    var commit = _ref2.commit;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    financeService.getCreateOrder({
      url: 'queryDrawHistory',
      qs: _extends({
        businessType: '01',
        ccy: 'RMB',
        productType: '1',
        beginDate: '20140301',
        endDate: '20160301'
      }, params)
    }, function (data) {
      commit(types.DEPOSIT_BUY, { lists: data });
    });
  },
  queryDrawHistory: function queryDrawHistory(_ref3) {
    var commit = _ref3.commit;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    financeService.queryDrawHistory({
      url: 'queryDrawHistory',
      qs: _extends({
        businessType: '00',
        ccy: 'RMB',
        productType: '1',
        beginDate: '20140301',
        endDate: '20160301'
      }, params)
    }, function (data) {
      commit(types.DEPOSIT_BUY_, { lists: data });
    });
  }
};

var mutations = (_mutations = {}, _defineProperty(_mutations, types.DEPOSIT_DETAIL, function (state, payload) {
  state.aipFund.lists = payload.lists;
  state.aipFund.lists.ccy = fit.monetaryUnit(state.aipFund.lists.ccy);
  localStorage.setItem('saveDeadline', state.aipFund.lists.saveDeadline);
  state.aipFund.lists.saveDeadline = fit.year(state.aipFund.lists.saveDeadline);
  state.aipFund.lists.depositAmtMin2 = fit.formatMoneyNumber(state.aipFund.lists.depositAmtMin, 'blur');
  state.aipFund.lists.interestRate = Number(state.aipFund.lists.interestRate).toFixed(3) + '%';
}), _defineProperty(_mutations, types.DEPOSIT_BUY, function (state, payload) {
  state.history.lists = payload.lists;
}), _defineProperty(_mutations, types.DEPOSIT_BUY_, function (state, payload) {
  state.history.real = payload.lists;
}), _mutations);

export default {
  state: state,
  actions: actions,
  mutations: mutations
};